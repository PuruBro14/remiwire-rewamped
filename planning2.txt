const handleSubmit = async (e) => {
  e.preventDefault();

  console.log("sendMoneyAboroadForms", sendMoneyAboroadForms);

  const {
    purposeOfTransfer,
    remiterAccountNo,
    remiterIFSCCode,
    pancardNumber,
    remiterFirstName,
    transferToCountry,
    receivingAmountInEuro,
    receivingAmountInINR,
    receivingCurrency,
    remiterMobileNo,
    remiterEmailID,
    transferFromState,
    addressProof,
    transferFromCity,
  } = sendMoneyAboroadForms;

  const newErrors = {};

  if (!sendMoneyAboroadForms.pancardNumber) {
    newErrors.pancardNumber = "PAN card number is required";
  } else if (!isValidPAN(sendMoneyAboroadForms.pancardNumber)) {
    newErrors.pancardNumber = "Invalid PAN card number format";
  }
  if (!documentProof.passportImage) {
    newErrors.passportImage = "Document is required";
  }
  if (!documentProof.panCardImage) {
    newErrors.panCardImage = "PAN card image is required";
  }
  if (!sendMoneyAboroadForms.remiterFirstName) {sendMoneyAboroadForms
    newErrors.remiterFirstName = "Remitter's first name is required";
  }
  if (!sendMoneyAboroadForms.remiterLastName) {
    newErrors.remiterLastName = "Remitter's last name is required";
  }
  if (!sendMoneyAboroadForms.remiterAccountNo) {
    newErrors.remiterAccountNo = "Remitter's account number is required";
  }
  if (!sendMoneyAboroadForms.remiterIFSCCode) {
    newErrors.remiterIFSCCode = "Remitter's IFSC code is required";
  }
  if (!sendMoneyAboroadForms.remiterEmailID) {
    newErrors.remiterEmailID = "Remitter's email ID is required";
  }
  if (!sendMoneyAboroadForms.remiterMobileNo) {
    newErrors.remiterMobileNo = "Remitter's mobile number is required";
  }

  setErrors(newErrors);

  if (Object.keys(newErrors).length === 0) {
    try {
      const response=await fetchFxRate(
        transferFromState,
        transferFromCity,
        purposeOfTransfer,
        transferToCountry,
        receivingAmountInEuro,
        receivingAmountInINR,
        receivingCurrency
      );

      console.log('response',response);
      setFxRateDetails(response)
      fetchFxDetails(response)

      await registerRemitter();
    } catch (error) {
      console.error("Error during form submission:", error);
    }
      purposeOfTransfer === "Maintenance of Close relative Abroad" ? setFormStep(2) : setFormStep(3);
  }
};



  // Clear error when input field is clicked
  const clearError = (fieldName) => {
    setErrors({ ...errors, [fieldName]: "" });
  };
